 1、响应式布局容器
    响应式需要一个父级作为布局容器，来配合子级元素来实现变化效果
    原理就是在不同的屏幕下，通过媒体查询来改变这个布局容器的大小，再改变里面子元素的排列方式和大小，从而实现不同屏幕下，看到不同的页面布局和样式变化

    平时的响应式布局尺寸划分
        超小屏幕（手机，小于768px max-width:768px）:设置宽度为100%
        小屏幕（平板，大于等于768px min-width:768px）:设置宽度为750px
        中等屏幕（桌面显示器，大于等于992px min-width:992px）:宽度设置为970px
        大屏幕（大桌面显示器，大于等于1200px min-width:1200px）:宽度设置为1170px

2、bootstarp
    bootstrap需要为页面内容和山栅格系统包裹一个.container容器，bootstarp预先定义好了这个类，叫做container
    他提供了又这作用的两个类：container类（符合上述响应式布局的要求）   container-fluid类（相当于百分比布局）

3、栅格系统
    把页面内容划分成等宽的列，然后同各个列数的定义来模块化页面布局，自动划分为12份（和rem很像，但是rem是将整个屏幕划分成若干份）
    用于通过一系列的行和列的组合来创建页面布局，内容就可以放进这些创建好的布局中
    实现类的平均划分需要给列添加类前缀： .col-xs-(超小屏幕，手机，小于768px)  .col-sm-(小屏设备)  .col-md-(中等屏幕)   .col-lg-(宽屏设备);例如col-lg-2 就是划分为2列的宽度
    ps: 行(row)必须放在container布局容器里面
        列大于12，多余的列所在的元素会被作为一个整体另一行排列    如果小于的话就会有空白
        每一列默认有15px的padding值（单个的列和整个的container都有）
        **可以同时为一列指定多个设备的类名，以便划分不同份数; 例如class="col=md-4 col-sm-6"

    3.1 列嵌套
        栅格系统内置的栅格系统将内容再次嵌套，就是一个列内再分成若干份小列，可以通过添加一个新的.row元素和一系列的.col-sm-元素到已存在的.col-sm-元素内
        ps:最好加一个行row，这样可以取消父元素的padding值而且高度自动和父级一样高

    3.2 列偏移
        使用.col-md-offset-类可以将列向右侧偏移，实际上是使用*选择器为当前元素增加了左侧的边距（margin）
        ps:要对右侧的盒子设置，因为一般默认左侧对齐;4.0版本后好像改成offset-4或者offset-md-4
        例子：<div class="col-md-3">左侧</div>
                ;偏移的份数 就是12-两个盒子的份数 = 6
              <div class="col-md-3 col-md-offset-6">右侧</div>
              效果是盒子左右两边对齐

                ;如果只有一个盒子，那么就偏移（12-8）/2
              <div class="col-md-8 col-md-offset-2">中间盒子</div>
              效果是盒子居中对齐

    3.5 列排序
        使用.col-md-push- 和 .col-md-pull-类就可以很容易的改变列的顺序

    3.6 响应式工具
        可以通过类名的设置方便的针对不同设备展示或隐藏页面内容
        类名 .hidden-xs  .hidden-sm   .hidden-md   .hidden-lg
        与之相反的是，visible-xs  visible-sm  visible-md   visible-lg
        (写上这些标签后会在规定的屏幕例如xs超小屏 sm小屏  md中屏  lg大屏 的时候显示/隐藏  其他屏幕则不显示/隐藏)
